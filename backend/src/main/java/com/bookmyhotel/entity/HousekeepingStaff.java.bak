package com.bookmyhotel.entity;

import java.time.LocalDateTime;
import java.util.List;

import jakarta.persistence.CollectionTable;
import jakarta.persistence.Column;
import jakarta.persistence.ElementCollection;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Table;

/**
 * Housekeeping staff entity for managing cleaning and maintenance personnel
 */
@Entity
@Table(name = "housekeeping_staff")
public class HousekeepingStaff {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    
    @Column(name = "employee_id", unique = true, nullable = false)
    private String employeeId;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    private User user;
    
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "hotel_id", nullable = false)
    private Hotel hotel;
    
    @Enumerated(EnumType.STRING)
    @Column(name = "shift_type", nullable = false)
    private ShiftType shiftType;
    
    @Column(name = "hourly_rate")
    private Double hourlyRate;
    
    @Column(name = "experience_level")
    private Integer experienceLevel; // Years of experience
    
    @ElementCollection
    @CollectionTable(name = "housekeeping_specializations", joinColumns = @JoinColumn(name = "staff_id"))
    @Enumerated(EnumType.STRING)
    @Column(name = "specialization")
    private List<HousekeepingTaskType> specializations;
    
    @Column(name = "max_concurrent_tasks")
    private Integer maxConcurrentTasks;
    
    @Column(name = "is_supervisor")
    private Boolean isSupervisor;
    
    @Column(name = "performance_rating")
    @Column(name = "performance_rating")
    private Double performanceRating; // 1.0 to 5.0
    
    @Column(name = "tasks_completed_today")
    private Integer tasksCompletedToday;
    
    // TODO: Add these fields when database migration is ready
    // @Column(name = "average_completion_time")
    // private Double averageCompletionTime; // Minutes
    
    @Column(name = "quality_score_average")
    private Double qualityScore; // Average quality score from inspections
    
    // TODO: Add these fields when database migration is ready
    // @Column(name = "last_training_date")
    // private LocalDateTime lastTrainingDate;
    
    // @Column(name = "certification_expiry")
    // private LocalDateTime certificationExpiry;
    
    @Column(name = "is_active")
    private Boolean isActive;

    @Column(name = "current_workload")
    private Integer currentWorkload; // Number of tasks currently assigned

    @Column(name = "average_rating")
    private Double averageRating; // Average rating from completed tasks

    // TODO: Add these fields when database migration is ready
    // @Column(name = "start_date")
    // private LocalDateTime startDate;
    
    // @Column(name = "end_date")
    // private LocalDateTime endDate;
    
    @Column(name = "tenant_id", nullable = false)
    private String tenantId;
    
    @Column(name = "created_at", nullable = false)
    private LocalDateTime createdAt;
    
    @Column(name = "updated_at")
    private LocalDateTime updatedAt;
    
    // Enum for shift types
    public enum ShiftType {
        MORNING("Morning Shift (6 AM - 2 PM)"),
        AFTERNOON("Afternoon Shift (2 PM - 10 PM)"),
        EVENING("Evening Shift (10 PM - 6 AM)"),
        FULL_TIME("Full Time (8 AM - 5 PM)"),
        PART_TIME("Part Time"),
        ON_CALL("On Call");
        
        private final String description;
        
        ShiftType(String description) {
            this.description = description;
        }
        
        public String getDescription() {
            return description;
        }
    }
    
    // Constructors
    public HousekeepingStaff() {}
    
    public HousekeepingStaff(String employeeId, User user, Hotel hotel, ShiftType shiftType, String tenantId) {
        this.employeeId = employeeId;
        this.user = user;
        this.hotel = hotel;
        this.shiftType = shiftType;
        this.tenantId = tenantId;
        this.isActive = true;
        this.isSupervisor = false;
        this.totalTasksCompleted = 0;
        this.maxConcurrentTasks = 3; // Default value
        this.performanceRating = 3.0; // Default rating
        this.startDate = LocalDateTime.now();
        this.createdAt = LocalDateTime.now();
    }
    
    // Getters and setters
    public Long getId() {
        return id;
    }
    
    public void setId(Long id) {
        this.id = id;
    }
    
    public String getEmployeeId() {
        return employeeId;
    }
    
    public void setEmployeeId(String employeeId) {
        this.employeeId = employeeId;
    }
    
    public User getUser() {
        return user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }
    
    public Hotel getHotel() {
        return hotel;
    }
    
    public void setHotel(Hotel hotel) {
        this.hotel = hotel;
    }
    
    public ShiftType getShiftType() {
        return shiftType;
    }
    
    public void setShiftType(ShiftType shiftType) {
        this.shiftType = shiftType;
    }
    
    public Double getHourlyRate() {
        return hourlyRate;
    }
    
    public void setHourlyRate(Double hourlyRate) {
        this.hourlyRate = hourlyRate;
    }
    
    public Integer getExperienceLevel() {
        return experienceLevel;
    }
    
    public void setExperienceLevel(Integer experienceLevel) {
        this.experienceLevel = experienceLevel;
    }
    
    public List<HousekeepingTaskType> getSpecializations() {
        return specializations;
    }
    
    public void setSpecializations(List<HousekeepingTaskType> specializations) {
        this.specializations = specializations;
    }
    
    public Integer getMaxConcurrentTasks() {
        return maxConcurrentTasks;
    }
    
    public void setMaxConcurrentTasks(Integer maxConcurrentTasks) {
        this.maxConcurrentTasks = maxConcurrentTasks;
    }
    
    public Boolean getIsSupervisor() {
        return isSupervisor;
    }
    
    public void setIsSupervisor(Boolean isSupervisor) {
        this.isSupervisor = isSupervisor;
    }
    
    public Double getPerformanceRating() {
        return performanceRating;
    }
    
    public void setPerformanceRating(Double performanceRating) {
        this.performanceRating = performanceRating;
    }
    
    public Integer getTotalTasksCompleted() {
        return totalTasksCompleted;
    }
    
    public void setTotalTasksCompleted(Integer totalTasksCompleted) {
        this.totalTasksCompleted = totalTasksCompleted;
    }
    
    public Double getAverageCompletionTime() {
        return averageCompletionTime;
    }
    
    public void setAverageCompletionTime(Double averageCompletionTime) {
        this.averageCompletionTime = averageCompletionTime;
    }
    
    public Double getQualityScore() {
        return qualityScore;
    }
    
    public void setQualityScore(Double qualityScore) {
        this.qualityScore = qualityScore;
    }
    
    public LocalDateTime getLastTrainingDate() {
        return lastTrainingDate;
    }
    
    public void setLastTrainingDate(LocalDateTime lastTrainingDate) {
        this.lastTrainingDate = lastTrainingDate;
    }
    
    public LocalDateTime getCertificationExpiry() {
        return certificationExpiry;
    }
    
    public void setCertificationExpiry(LocalDateTime certificationExpiry) {
        this.certificationExpiry = certificationExpiry;
    }
    
    public Boolean getIsActive() {
        return isActive;
    }
    
    public void setIsActive(Boolean isActive) {
        this.isActive = isActive;
    }
    
    public Integer getCurrentWorkload() {
        return currentWorkload;
    }
    
    public void setCurrentWorkload(Integer currentWorkload) {
        this.currentWorkload = currentWorkload;
    }
    
    public Double getAverageRating() {
        return averageRating;
    }
    
    public void setAverageRating(Double averageRating) {
        this.averageRating = averageRating;
    }
    
    public LocalDateTime getStartDate() {
        return startDate;
    }
    
    public void setStartDate(LocalDateTime startDate) {
        this.startDate = startDate;
    }
    
    public LocalDateTime getEndDate() {
        return endDate;
    }
    
    public void setEndDate(LocalDateTime endDate) {
        this.endDate = endDate;
    }
    
    public String getTenantId() {
        return tenantId;
    }
    
    public void setTenantId(String tenantId) {
        this.tenantId = tenantId;
    }
    
    public LocalDateTime getCreatedAt() {
        return createdAt;
    }
    
    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }
    
    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }
    
    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }
    
    // Business methods
    public boolean canHandleTaskType(HousekeepingTaskType taskType) {
        return specializations == null || specializations.isEmpty() || specializations.contains(taskType);
    }
    
    public boolean isAvailableForNewTask(int currentActiveTasks) {
        return isActive && currentActiveTasks < maxConcurrentTasks;
    }
    
    public boolean needsTraining() {
        if (lastTrainingDate == null) return true;
        return lastTrainingDate.isBefore(LocalDateTime.now().minusMonths(6));
    }
    
    public boolean isCertificationExpiring() {
        if (certificationExpiry == null) return false;
        return certificationExpiry.isBefore(LocalDateTime.now().plusDays(30));
    }
    
    public String getExperienceLevelDescription() {
        if (experienceLevel == null) return "Unknown";
        if (experienceLevel < 1) return "Trainee";
        if (experienceLevel < 2) return "Junior";
        if (experienceLevel < 5) return "Experienced";
        if (experienceLevel < 10) return "Senior";
        return "Expert";
    }
    
    public void updatePerformanceMetrics(double newQualityScore, int taskDurationMinutes) {
        // Update total tasks completed
        this.totalTasksCompleted = (this.totalTasksCompleted == null ? 0 : this.totalTasksCompleted) + 1;
        
        // Update average completion time
        if (this.averageCompletionTime == null) {
            this.averageCompletionTime = (double) taskDurationMinutes;
        } else {
            this.averageCompletionTime = (this.averageCompletionTime * (this.totalTasksCompleted - 1) + taskDurationMinutes) / this.totalTasksCompleted;
        }
        
        // Update quality score
        if (this.qualityScore == null) {
            this.qualityScore = newQualityScore;
        } else {
            this.qualityScore = (this.qualityScore * (this.totalTasksCompleted - 1) + newQualityScore) / this.totalTasksCompleted;
        }
        
        // Update performance rating based on quality and efficiency
        double efficiencyScore = calculateEfficiencyScore();
        this.performanceRating = (this.qualityScore * 0.6) + (efficiencyScore * 0.4);
        
        this.updatedAt = LocalDateTime.now();
    }
    
    private double calculateEfficiencyScore() {
        // Calculate efficiency based on how the staff performs relative to task estimates
        // This is a simplified calculation - in reality you'd compare against standard times
        if (averageCompletionTime == null) return 3.0;
        
        // Assume standard time for tasks is 45 minutes
        double standardTime = 45.0;
        double ratio = standardTime / averageCompletionTime;
        
        if (ratio >= 1.2) return 5.0; // 20% faster than standard
        if (ratio >= 1.1) return 4.5; // 10% faster
        if (ratio >= 0.9) return 4.0; // Within 10% of standard
        if (ratio >= 0.8) return 3.0; // 20% slower
        if (ratio >= 0.7) return 2.0; // 30% slower
        return 1.0; // More than 30% slower
    }
    
    // Convenience methods to access User properties
    public String getFirstName() {
        return user != null ? user.getFirstName() : null;
    }
    
    public String getLastName() {
        return user != null ? user.getLastName() : null;
    }
    
    public String getEmail() {
        return user != null ? user.getEmail() : null;
    }
    
    public String getPhone() {
        return user != null ? user.getPhone() : null;
    }
    
    public String getRole() {
        return isSupervisor ? "Supervisor" : "Staff";
    }
    
    // Additional setters and fields for service compatibility
    private String firstName;
    private String lastName;
    private String email;
    private String phone;
    private com.bookmyhotel.enums.HousekeepingRole housekeepingRole;
    private com.bookmyhotel.enums.WorkShift workShift;
    private com.bookmyhotel.enums.StaffStatus staffStatus;
    private LocalDateTime hireDate;
    private Integer tasksCompletedToday;
    
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    
    public void setPhone(String phone) {
        this.phone = phone;
    }
    
    public void setRole(com.bookmyhotel.enums.HousekeepingRole role) {
        this.housekeepingRole = role;
    }
    
    public com.bookmyhotel.enums.HousekeepingRole getHousekeepingRole() {
        return housekeepingRole;
    }
    
    public void setShift(com.bookmyhotel.enums.WorkShift shift) {
        this.workShift = shift;
    }
    
    public com.bookmyhotel.enums.WorkShift getWorkShift() {
        return workShift;
    }
    
    public void setStatus(com.bookmyhotel.enums.StaffStatus status) {
        this.staffStatus = status;
    }
    
    public com.bookmyhotel.enums.StaffStatus getStaffStatus() {
        return staffStatus;
    }
    
    // Convenience method for controller compatibility
    public String getStatus() {
        return staffStatus != null ? staffStatus.getDisplayName() : "Unknown";
    }
    
    public void setHireDate(LocalDateTime hireDate) {
        this.hireDate = hireDate;
    }
    
    public LocalDateTime getHireDate() {
        return hireDate;
    }
    
    public void setTasksCompletedToday(Integer tasksCompletedToday) {
        this.tasksCompletedToday = tasksCompletedToday;
    }
    
    public Integer getTasksCompletedToday() {
        return tasksCompletedToday;
    }
    
    public void setAverageTaskDuration(Double averageTaskDuration) {
        this.averageCompletionTime = averageTaskDuration;
    }
    
    public void setQualityScoreAverage(Double qualityScoreAverage) {
        this.qualityScore = qualityScoreAverage;
    }
    
    // Business methods for service compatibility
    public boolean isAvailableForTask() {
        return isActive && 
               staffStatus == com.bookmyhotel.enums.StaffStatus.ACTIVE &&
               (currentWorkload == null || currentWorkload < maxConcurrentTasks);
    }
    
    public void markAsWorking() {
        if (currentWorkload == null) {
            currentWorkload = 1;
        } else {
            currentWorkload++;
        }
        this.updatedAt = LocalDateTime.now();
    }
}
