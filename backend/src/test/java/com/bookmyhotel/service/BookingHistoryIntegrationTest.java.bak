package com.bookmyhotel.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bookmyhotel.dto.BookingRequest;
import com.bookmyhotel.dto.BookingResponse;
import com.bookmyhotel.entity.*;
import com.bookmyhotel.repository.*;

/**
 * Integration test for booking history tracking functionality
 */
public class BookingHistoryIntegrationTest {

    @Mock
    private ReservationRepository reservationRepository;
    
    @Mock
    private RoomRepository roomRepository;
    
    @Mock
    private UserRepository userRepository;
    
    @Mock
    private BookingHistoryService historyService;
    
    @Mock
    private BookingNotificationService notificationService;
    
    @Mock
    private EmailService emailService;
    
    @Mock
    private BookingTokenService bookingTokenService;
    
    @Mock
    private PdfService pdfService;
    
    @InjectMocks
    private BookingService bookingService;
    
    private User testUser;
    private Room testRoom;
    private Reservation testReservation;
    
    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
        
        // Setup test user
        testUser = new User();
        testUser.setId(1L);
        testUser.setEmail("test@example.com");
        testUser.setFirstName("John");
        testUser.setLastName("Doe");
        
        // Setup test room
        testRoom = new Room();
        testRoom.setId(1L);
        testRoom.setRoomNumber("101");
        testRoom.setRoomType(RoomType.SINGLE);
        testRoom.setPricePerNight(BigDecimal.valueOf(100));
        testRoom.setStatus(RoomStatus.AVAILABLE);
        
        // Setup test reservation
        testReservation = new Reservation();
        testReservation.setId(1L);
        testReservation.setGuest(testUser);
        testReservation.setRoom(testRoom);
        testReservation.setCheckInDate(LocalDate.now().plusDays(1));
        testReservation.setCheckOutDate(LocalDate.now().plusDays(3));
        testReservation.setTotalAmount(BigDecimal.valueOf(200));
        testReservation.setStatus(ReservationStatus.CONFIRMED);
        testReservation.setConfirmationNumber("CONF123456");
        testReservation.setCreatedAt(LocalDateTime.now());
    }
    
    @Test
    void testBookingCreationRecordsHistory() {
        // Given
        BookingRequest request = new BookingRequest();
        request.setRoomId(1L);
        request.setCheckInDate(LocalDate.now().plusDays(1));
        request.setCheckOutDate(LocalDate.now().plusDays(3));
        request.setGuests(2);
        request.setGuestName("John Doe");
        request.setGuestEmail("test@example.com");
        request.setGuestPhone("1234567890");
        
        when(roomRepository.findById(1L)).thenReturn(Optional.of(testRoom));
        when(roomRepository.isRoomAvailable(any(), any(), any())).thenReturn(true);
        when(userRepository.findByEmail("test@example.com")).thenReturn(Optional.of(testUser));
        when(reservationRepository.save(any(Reservation.class))).thenReturn(testReservation);
        when(bookingTokenService.generateManagementUrl(any(), any(), any())).thenReturn("http://test.com/manage");
        
        // When
        BookingResponse result = bookingService.createBooking(request, "test@example.com");
        
        // Then
        assertNotNull(result);
        verify(historyService).recordBookingAction(
            eq(testReservation), 
            eq(BookingActionType.CREATED), 
            contains("test@example.com"), 
            contains("New booking created"), 
            eq(BigDecimal.valueOf(200)),
            eq(null),
            any(Map.class)
        );
    }
    
    @Test
    void testBookingCancellationRecordsHistory() {
        // Given
        when(reservationRepository.findById(1L)).thenReturn(Optional.of(testReservation));
        when(reservationRepository.save(any(Reservation.class))).thenReturn(testReservation);
        
        // When
        BookingResponse result = bookingService.cancelBooking(1L);
        
        // Then
        assertNotNull(result);
        verify(historyService).recordCancellation(
            eq(testReservation), 
            contains("System"), 
            contains("cancelled"), 
            any(BigDecimal.class)
        );
    }
    
    @Test
    void testHistoryServiceRecordsCorrectActionTypes() {
        // This test would verify that all the different action types are being recorded correctly
        // We can expand this as needed
        
        // Test that our history service is properly injected and configured
        assertNotNull(historyService);
        
        // We could add more specific tests here for each action type
        // like check-in, check-out, modifications, etc.
    }
}
